From d65354a4b06d573b34a5485b9207d3492c48ff27 Mon Sep 17 00:00:00 2001
From: Derek Foreman <derek.foreman@collabora.com>
Date: Fri, 10 Nov 2023 07:25:35 -0600
Subject: [PATCH 2/5] vulkan/wsi/wayland: Use commit_timing/commit_queue
 protocol for FIFO

The commit_timing protocol allows us to set a presentation timestamp,
and the commit_queue protocol allows us to request FIFO semantics for
committed state (instead of the default mailbox).

I these are available, use them to implement Vulkan's FIFO presentation
mode.

Signed-off-by: Derek Foreman <derek.foreman@collabora.com>
---
 src/egl/wayland/wayland-drm/meson.build |   2 +
 src/vulkan/wsi/meson.build              |   2 +
 src/vulkan/wsi/wsi_common_wayland.c     | 139 +++++++++++++++++++++---
 3 files changed, 130 insertions(+), 13 deletions(-)

diff --git a/src/egl/wayland/wayland-drm/meson.build b/src/egl/wayland/wayland-drm/meson.build
index ac822acec67..8b6044f09e5 100644
--- a/src/egl/wayland/wayland-drm/meson.build
+++ b/src/egl/wayland/wayland-drm/meson.build
@@ -59,6 +59,8 @@ libwayland_drm = static_library(
 # here for now as the maybe-least-bad solution.
 wp_dir = dep_wl_protocols.get_variable(pkgconfig : 'pkgdatadir', internal : 'pkgdatadir')
 wp_protos = {
+  'commit-queue-v1': 'staging/commit-queue/commit-queue-v1.xml',
+  'commit-timing-v1': 'staging/commit-timing/commit-timing-v1.xml',
   'linux-dmabuf-unstable-v1': 'unstable/linux-dmabuf/linux-dmabuf-unstable-v1.xml',
   'presentation-time': 'stable/presentation-time/presentation-time.xml',
   'tearing-control-v1': 'staging/tearing-control/tearing-control-v1.xml',
diff --git a/src/vulkan/wsi/meson.build b/src/vulkan/wsi/meson.build
index c8206eac996..48ea09b99aa 100644
--- a/src/vulkan/wsi/meson.build
+++ b/src/vulkan/wsi/meson.build
@@ -31,6 +31,8 @@ endif
 
 if with_platform_wayland
   files_vulkan_wsi += files('wsi_common_wayland.c')
+  files_vulkan_wsi += wp_files['commit-queue-v1']
+  files_vulkan_wsi += wp_files['commit-timing-v1']
   files_vulkan_wsi += wp_files['linux-dmabuf-unstable-v1']
   files_vulkan_wsi += wp_files['presentation-time']
   files_vulkan_wsi += wp_files['tearing-control-v1']
diff --git a/src/vulkan/wsi/wsi_common_wayland.c b/src/vulkan/wsi/wsi_common_wayland.c
index e80ac56cfe8..28f8f3b5e8f 100644
--- a/src/vulkan/wsi/wsi_common_wayland.c
+++ b/src/vulkan/wsi/wsi_common_wayland.c
@@ -41,6 +41,8 @@
 #include "vk_util.h"
 #include "wsi_common_entrypoints.h"
 #include "wsi_common_private.h"
+#include "commit-queue-v1-client-protocol.h"
+#include "commit-timing-v1-client-protocol.h"
 #include "linux-dmabuf-unstable-v1-client-protocol.h"
 #include "presentation-time-client-protocol.h"
 #include "tearing-control-v1-client-protocol.h"
@@ -113,6 +115,9 @@ struct wsi_wl_display {
    /* users want per-chain wsi_wl_swapchain->present_ids.wp_presentation */
    struct wp_presentation *wp_presentation_notwrapped;
 
+   struct wp_commit_queue_manager_v1 *commit_queue_manager;
+   struct wp_commit_timing_manager_v1 *commit_timing_manager;
+
    struct wsi_wayland *wsi_wl;
 
    /* Formats populated by zwp_linux_dmabuf_v1 or wl_shm interfaces */
@@ -135,6 +140,7 @@ struct wsi_wayland {
 
 struct wsi_wl_image {
    struct wsi_image base;
+   struct wsi_wl_swapchain *chain;
    struct wl_buffer *buffer;
    bool busy;
    int shm_fd;
@@ -166,6 +172,9 @@ struct wsi_wl_swapchain {
 
    struct wsi_wl_surface *wsi_wl_surface;
    struct wp_tearing_control_v1 *tearing_control;
+   struct wp_commit_queue_v1 *commit_queue;
+   struct wp_commit_timer_v1 *commit_timer;
+   bool can_timestamp;
 
    struct wl_callback *frame;
 
@@ -181,13 +190,17 @@ struct wsi_wl_swapchain {
    const uint64_t *drm_modifiers;
 
    VkPresentModeKHR present_mode;
-   bool fifo_ready;
+   bool legacy_fifo_ready;
+
+   uint64_t last_target_time;
 
    struct {
       pthread_mutex_t lock; /* protects all members */
       uint64_t max_completed;
       struct wl_list outstanding_list;
       struct wp_presentation *wp_presentation;
+      uint64_t phase_time;
+      unsigned int refresh_nsec;
    } present_ids;
 
    struct wsi_wl_image images[0];
@@ -934,6 +947,12 @@ registry_handle_global(void *data, struct wl_registry *registry,
    } else if (strcmp(interface, wp_tearing_control_manager_v1_interface.name) == 0) {
       display->tearing_control_manager =
          wl_registry_bind(registry, name, &wp_tearing_control_manager_v1_interface, 1);
+   } else if (strcmp(interface, wp_commit_timing_manager_v1_interface.name) == 0) {
+      display->commit_timing_manager =
+         wl_registry_bind(registry, name, &wp_commit_timing_manager_v1_interface, 1);
+   } else if (strcmp(interface, wp_commit_queue_manager_v1_interface.name) == 0) {
+      display->commit_queue_manager =
+         wl_registry_bind(registry, name, &wp_commit_queue_manager_v1_interface, 1);
    }
 }
 
@@ -960,6 +979,10 @@ wsi_wl_display_finish(struct wsi_wl_display *display)
       zwp_linux_dmabuf_v1_destroy(display->wl_dmabuf);
    if (display->wp_presentation_notwrapped)
       wp_presentation_destroy(display->wp_presentation_notwrapped);
+   if (display->commit_queue_manager)
+      wp_commit_queue_manager_v1_destroy(display->commit_queue_manager);
+   if (display->commit_timing_manager)
+      wp_commit_timing_manager_v1_destroy(display->commit_timing_manager);
    if (display->tearing_control_manager)
       wp_tearing_control_manager_v1_destroy(display->tearing_control_manager);
    if (display->wl_display_wrapper)
@@ -1919,6 +1942,16 @@ wsi_wl_swapchain_acquire_next_image(struct wsi_swapchain *wsi_chain,
       else
          time_left = end_time - now;
 
+      /* If we can use timestamps, we want to make sure to dispatch the queue
+       * feedback events are in so we can get a refresh rate and a vsync time to
+       * phase lock to */
+      if (chain->can_timestamp) {
+         ret = wl_display_dispatch_queue_pending(wsi_wl_surface->display->wl_display,
+                                                 chain->queue);
+         if (ret < 0)
+            return VK_ERROR_OUT_OF_DATE_KHR;
+      }
+
       ret = wsi_wl_display_dispatch_queue_with_timeout(wsi_wl_surface->display,
                                                        wsi_wl_surface->display->queue,
                                                        time_left);
@@ -1949,10 +1982,16 @@ presentation_handle_presented(void *data,
                               uint32_t flags)
 {
    struct wsi_wl_present_id *id = data;
+   struct timespec presentation_time;
 
    pthread_mutex_lock(&id->chain->present_ids.lock);
    if (id->present_id > id->chain->present_ids.max_completed)
       id->chain->present_ids.max_completed = id->present_id;
+
+   presentation_time.tv_sec = ((uint64_t)tv_sec_hi << 32) + tv_sec_lo;
+   presentation_time.tv_nsec = tv_nsec;
+   id->chain->present_ids.phase_time = timespec_to_nsec(&presentation_time);
+   id->chain->present_ids.refresh_nsec = refresh;
    pthread_mutex_unlock(&id->chain->present_ids.lock);
 
    wp_presentation_feedback_destroy(feedback);
@@ -1988,8 +2027,10 @@ frame_handle_done(void *data, struct wl_callback *callback, uint32_t serial)
 {
    struct wsi_wl_swapchain *chain = data;
 
+   assert(!chain->can_timestamp);
+
    chain->frame = NULL;
-   chain->fifo_ready = true;
+   chain->legacy_fifo_ready = true;
 
    wl_callback_destroy(callback);
 }
@@ -1998,6 +2039,46 @@ static const struct wl_callback_listener frame_listener = {
    frame_handle_done,
 };
 
+static void
+set_timestamp(struct wsi_wl_swapchain *chain)
+{
+   uint64_t now, target;
+   struct timespec target_ts;
+   uint64_t refresh;
+   uint64_t phase_time;
+
+   now = os_time_get_nano();
+
+   pthread_mutex_lock(&chain->present_ids.lock);
+   phase_time = chain->present_ids.phase_time;
+   refresh = chain->present_ids.refresh_nsec;
+   pthread_mutex_unlock(&chain->present_ids.lock);
+
+   if (refresh == 0)
+      refresh = 16666666;
+
+   target = chain->last_target_time + refresh;
+
+   if (now > target) {
+      uint64_t offset;
+
+      if (phase_time > now)
+         now = phase_time;
+
+      offset = (now - phase_time) % refresh;
+      target = now - offset + refresh;
+   }
+
+   timespec_from_nsec(&target_ts, target);
+   wp_commit_timer_v1_set_timestamp(chain->commit_timer,
+                                    target_ts.tv_sec >> 32, target_ts.tv_sec,
+                                    target_ts.tv_nsec);
+
+   wp_commit_queue_v1_set_queue_mode(chain->commit_queue,
+                                     WP_COMMIT_QUEUE_V1_QUEUE_MODE_FIFO);
+   chain->last_target_time = target;
+}
+
 static VkResult
 wsi_wl_swapchain_queue_present(struct wsi_swapchain *wsi_chain,
                                uint32_t image_index,
@@ -2006,6 +2087,7 @@ wsi_wl_swapchain_queue_present(struct wsi_swapchain *wsi_chain,
 {
    struct wsi_wl_swapchain *chain = (struct wsi_wl_swapchain *)wsi_chain;
    struct wsi_wl_surface *wsi_wl_surface = chain->wsi_wl_surface;
+   bool mode_fifo = chain->base.present_mode == VK_PRESENT_MODE_FIFO_KHR;
 
    if (chain->buffer_type == WSI_WL_BUFFER_SHM_MEMCPY) {
       struct wsi_wl_image *image = &chain->images[image_index];
@@ -2015,7 +2097,7 @@ wsi_wl_swapchain_queue_present(struct wsi_swapchain *wsi_chain,
 
    /* For EXT_swapchain_maintenance1. We might have transitioned from FIFO to MAILBOX.
     * In this case we need to let the FIFO request complete, before presenting MAILBOX. */
-   while (!chain->fifo_ready) {
+   while (!chain->can_timestamp && !chain->legacy_fifo_ready) {
       int ret = wl_display_dispatch_queue(wsi_wl_surface->display->wl_display,
                                           wsi_wl_surface->display->queue);
       if (ret < 0)
@@ -2038,16 +2120,19 @@ wsi_wl_swapchain_queue_present(struct wsi_swapchain *wsi_chain,
       wl_surface_damage(wsi_wl_surface->surface, 0, 0, INT32_MAX, INT32_MAX);
    }
 
-   if (chain->base.present_mode == VK_PRESENT_MODE_FIFO_KHR) {
-      chain->frame = wl_surface_frame(wsi_wl_surface->surface);
-      wl_callback_add_listener(chain->frame, &frame_listener, chain);
-      chain->fifo_ready = false;
-   } else {
-      /* If we present MAILBOX, any subsequent presentation in FIFO can replace this image. */
-      chain->fifo_ready = true;
+   if (!chain->can_timestamp) {
+      if (mode_fifo) {
+         chain->frame = wl_surface_frame(wsi_wl_surface->surface);
+         wl_callback_add_listener(chain->frame, &frame_listener, chain);
+         chain->legacy_fifo_ready = false;
+      } else {
+         /* If we present MAILBOX, any subsequent presentation in FIFO can replace this image. */
+         chain->legacy_fifo_ready = true;
+      }
    }
 
-   if (present_id > 0 && chain->present_ids.wp_presentation) {
+   if (chain->present_ids.wp_presentation &&
+       (present_id > 0 || (chain->can_timestamp && mode_fifo))) {
       struct wsi_wl_present_id *id =
          vk_zalloc(chain->wsi_wl_surface->display->wsi_wl->alloc, sizeof(*id), sizeof(uintptr_t),
                    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT);
@@ -2066,6 +2151,10 @@ wsi_wl_swapchain_queue_present(struct wsi_swapchain *wsi_chain,
    }
 
    chain->images[image_index].busy = true;
+
+   if (chain->can_timestamp && mode_fifo)
+      set_timestamp(chain);
+
    wl_surface_commit(wsi_wl_surface->surface);
    wl_display_flush(wsi_wl_surface->display->wl_display);
 
@@ -2181,6 +2270,7 @@ wsi_wl_image_init(struct wsi_wl_swapchain *chain,
       goto fail_image;
 
    wl_buffer_add_listener(image->buffer, &buffer_listener, image);
+   image->chain = chain;
 
    return VK_SUCCESS;
 
@@ -2234,8 +2324,13 @@ wsi_wl_swapchain_chain_free(struct wsi_wl_swapchain *chain,
    if (chain->queue)
       wl_event_queue_destroy(chain->queue);
 
-   vk_free(pAllocator, (void *)chain->drm_modifiers);
+   if (chain->commit_queue)
+      wp_commit_queue_v1_destroy(chain->commit_queue);
+
+   if (chain->commit_timer)
+      wp_commit_timer_v1_destroy(chain->commit_timer);
 
+   vk_free(pAllocator, (void *)chain->drm_modifiers);
    wsi_swapchain_finish(&chain->base);
 }
 
@@ -2291,6 +2386,15 @@ wsi_wl_surface_create_swapchain(VkIcdSurfaceBase *icd_surface,
          wp_tearing_control_v1_destroy(old_chain->tearing_control);
          old_chain->tearing_control = NULL;
       }
+      if (old_chain->commit_queue) {
+         wp_commit_queue_v1_destroy(old_chain->commit_queue);
+         old_chain->commit_queue = NULL;
+         old_chain->can_timestamp = false;
+      }
+      if (old_chain->commit_timer) {
+         wp_commit_timer_v1_destroy(old_chain->commit_timer);
+         old_chain->commit_timer = NULL;
+      }
    }
 
    /* Take ownership of the wsi_wl_surface */
@@ -2417,7 +2521,16 @@ wsi_wl_surface_create_swapchain(VkIcdSurfaceBase *icd_surface,
                          chain->queue);
    }
 
-   chain->fifo_ready = true;
+   chain->legacy_fifo_ready = true;
+   struct wsi_wl_display *dpy = chain->wsi_wl_surface->display;
+   if (dpy->commit_queue_manager &&
+       dpy->commit_timing_manager) {
+      chain->commit_queue = wp_commit_queue_manager_v1_get_queue_controller(dpy->commit_queue_manager,
+                                                                            chain->wsi_wl_surface->surface);
+      chain->commit_timer = wp_commit_timing_manager_v1_get_timer(dpy->commit_timing_manager,
+                                                                  chain->wsi_wl_surface->surface);
+      chain->can_timestamp = true;
+   }
 
    for (uint32_t i = 0; i < chain->base.image_count; i++) {
       result = wsi_wl_image_init(chain, &chain->images[i],
-- 
2.43.0

