name: Build packages
on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'
env:
 MARCH: "znver1"
 REPODIR: /tmp/temp_repo
 REPONAME: "bouhaa"

permissions:
  contents: write
  pull-requests: write

jobs:
  list:
    runs-on: ubuntu-latest
    outputs:
      pkgs: ${{ steps.set-pkgs.outputs.pkgs }}
    steps:
      - uses: actions/checkout@v3
      - id: set-pkgs
        run: |
          echo "pkgs=$(ls -d pkgs/*/ | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
        shell: bash

  build:
    needs:
     - list
    name: Build package
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        package: ${{ fromJson(needs.list.outputs.pkgs) }}
    container: archlinux:base-devel

    steps:
      - name: Install git
        run: |
          pacman -Sy --noconfirm git
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - if: ${{ !contains(matrix.package, '-git') }}
        name: Cache package
        id: cache
        uses: actions/cache@v3
        with:
          key: ${{ matrix.package }}${{ hashFiles(format('{0}/PKGBUILD', matrix.package)) }}
          path: /home/build/${{ matrix.package }}
      - if: ${{ steps.cache.outputs.cache-hit != 'true'}} || 
        name: Set up pacman keyring
        run: |
          pacman-key --init
          pacman-key --populate archlinux
          mkdir -p /etc/gnupg && echo "auto-key-retrieve" >> /etc/gnupg/gpg.conf
          sed -i '/ParallelDownloads/s/^#//g' /etc/pacman.conf
          echo -e "[multilib]\nInclude = /etc/pacman.d/mirrorlist\n" >> /etc/pacman.conf
          echo "Server=https://archive.archlinux.org/repos/$(date -d 'yesterday' +%Y/%m/%d)/\$repo/os/\$arch" > /etc/pacman.d/mirrorlist;
      - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        name: Setup build flags
        run: |
          sed -i 's/-march=[^ ]* -mtune=[^ ]*/-march=${{ env.MARCH }}/' /etc/makepkg.conf
          sed -i 's/^#MAKEFLAGS=[^ ]*/MAKEFLAGS="-j$(nproc)"/g' /etc/makepkg.conf
          cat /etc/makepkg.conf
      - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        name: Update to archive date
        run: pacman -Syyuu --noconfirm
      - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        name: Create build user
        run: |
          useradd -m build
          mkdir -p /home/build/pkgs
          cp -vR ${{ matrix.package }} /home/build/pkgs
          chown -vR build /home/build/${{ matrix.package }}
      - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        name: Install dependencies
        shell: bash
        run: |
          pacman -S --noconfirm $(sed -n -e 's/^[[:space:]]*\(make\)\?depends\(_x86_64\)\? = \([[:alnum:][:punct:]]*\)[[:space:]]*$/\3/p' /home/build/${{ matrix.package }}/.SRCINFO)
      - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        name: Build package
        id: build-package
        shell: bash
        run: |
          su build bash -c "cd /home/build/${{ matrix.package }} && makepkg"
      - name: Remove epoch in name
        shell: bash
        run: |
          find /home/build/${{ matrix.package }}/*.pkg.tar* -type f -name '*:*' -execdir bash -c 'mv "$1" "${1//:/--}"' bash {} \;
      - name: Upload package artifact
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: |
            /home/build/${{ matrix.package }}/*.pkg.tar.zst
          if-no-files-found: error

  repo:
    needs:
      - build
    name: Build Repo
    runs-on: ubuntu-latest
    container: archlinux:base-devel

    steps:
      - name: Download package artifact
        uses: actions/download-artifact@v3
        with:
          name: packages
          path:
            ${{ env.REPODIR }}
      - name: Create Repo
        id: repo
        shell: bash
        run: |
            repo-add ${{ env.REPODIR }}/${{ env.REPONAME }}.db.tar.gz ${{ env.REPODIR }}/*.pkg.*
            echo "date=$(date -d 'yesterday' +%Y/%m/%d)" >> "$GITHUB_OUTPUT"
      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.repo.outputs.date }}
          target_commitish: ${{ github.sha }}
          draft: false
          prerelease: true
          fail_on_unmatched_files: true
          files: |
            ${{ env.REPODIR }}/*

